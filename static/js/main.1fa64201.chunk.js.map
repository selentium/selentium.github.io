{"version":3,"sources":["features/reddit/reducers/RedditApiClient.js","features/reddit/settings.js","features/reddit/reducers/posts.js","features/reddit/reducers/subreddits.js","features/reddit/components/Post.js","features/reddit/components/SubredditsDialog.js","features/reddit/components/Layout.js","features/reddit/containers/App.js","features/reddit/reducers/index.js","features/reddit/store/index.js","serviceWorker.js","index.js"],"names":["fetchSubreddit","subredditName","after","a","fetch","apiResponse","json","posts","data","children","map","post","hasOwnProperty","preview","images","source","url","includes","subreddit","title","source_image","image_resolutions","resolutions","author","permalink","id","filter","p","before","AVAILABLE_SUBREDDITS","fetchPosts","createAsyncThunk","criteria","thunkApi","result","postsSlice","createSlice","name","initialState","cursors","currentIndex","reducers","next","state","action","length","prev","removeSubreddit","payload","extraReducers","fulfilled","concat","hasPrevPost","hasNextPost","needToFetch","canFetch","k","currentPost","normalizePost","subredditURL","authorURL","imageSrc","replace","subredditsSlice","subreddits","settingsOpen","addSubreddit","sr","push","index","indexOf","splice","openSettings","closeSettings","availableSubreddits","canRemoveSubreddit","Post","prevPostButton","nextPostButton","nextPost","prevPost","className","onClick","e","preventDefault","document","querySelector","scrollIntoView","behavior","href","alt","src","SubredditsDialog","removeSubredditFromPosts","display","subredditsMarkup","checked","disabled","key","type","onChange","target","handleChange","htmlFor","tabIndex","role","style","data-dismiss","aria-label","aria-hidden","Layout","props","postJSX","App","i","this","fetchAll","Component","connect","dispatch","actions","toggleSubreddit","combineReducers","reducer","middleware","getDefaultMiddleware","store","configureStore","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fa64201.chunk.js","sourcesContent":["import 'cross-fetch/polyfill'\n\n\nexport const fetchSubreddit  = async (subredditName, after) => {\n    let apiResponse;\n    if (after) {\n        apiResponse = await fetch(`https://www.reddit.com/r/${subredditName}.json?after=${after}`)\n    }\n    else {\n        apiResponse = await fetch(`https://www.reddit.com/r/${subredditName}.json`)\n    }\n    apiResponse = await apiResponse.json()\n    let posts = apiResponse.data.children.map(post => {\n        post = post.data;\n        if (!post.hasOwnProperty('preview')) {\n            return null;\n        }\n        if (post.preview.images[0].source.url.includes('https://external-preview.redd.it/')) {\n            return null;\n        }\n        return {\n            subreddit: subredditName,\n            title: post.title,\n            source_image: post.preview.images[0].source,\n            image_resolutions: post.preview.images[0].resolutions,\n            author: post.author,\n            permalink: post.permalink,\n            id: post.id\n        };\n    })\n    posts = posts.filter((p) => p != null)\n    return {posts: posts, before: apiResponse.data.before, after: apiResponse.data.after, subreddit: subredditName}\n}","export const AVAILABLE_SUBREDDITS = [\n    \"EarthPorn\",\n    \"naturepics\",\n    \"LandscapePhotography\",\n    \"natureporn\"\n];\n\nexport const DEFAULT_SUBREDDITS = [\n    \"EarthPorn\",\n    \"naturepics\",\n    \"LandscapePhotography\",\n    \"natureporn\"    \n];\n\n\nexport const FETCH_THRESHOLD = 5;\n\nexport const SITE_TITLE = \"Nature Pics\"","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\nimport {fetchSubreddit} from './RedditApiClient'\nimport {FETCH_THRESHOLD} from '../settings.js'\n\n\nexport const fetchPosts = createAsyncThunk(\n    'fetchPosts',\n    async (criteria, thunkApi) => {\n        let subredditName, after;\n        if (typeof criteria == 'object') {\n            ({subredditName, after} = criteria);\n        }\n        else {\n            subredditName = criteria;\n        }\n        const result = await fetchSubreddit(subredditName, after);\n        return result;\n    }\n);\n\n\n\nexport const postsSlice = createSlice({\n    name: 'posts',\n    initialState: {posts: [], cursors: {}, currentIndex: -1},\n    reducers: {\n        next: (state, action) => {\n            if ((state.currentIndex + 1) <= (state.posts.length  - 1)) {\n                ++state.currentIndex;\n            }\n        },\n        prev: (state, action) => {\n            if (state.currentIndex > 0) {\n                --state.currentIndex;\n            }\n        },\n        removeSubreddit: (state, action) => {\n            state.posts = state.posts.filter(post => post.subreddit != action.payload);\n            if (state.posts.length == 0) {\n                state.currentIndex = -1;\n            }\n            if (state.currentIndex > state.posts.length - 1) {\n                state.currentIndex = state.posts.length - 1;\n            }\n        },\n\n    },\n    extraReducers: {\n        [fetchPosts.fulfilled]: (state, action) => {\n            state.posts = state.posts.concat(action.payload.posts);\n            state.cursors[action.payload.subreddit]  = {\n                before: action.payload.before,\n                after: action.payload.after\n            } \n            if (state.currentIndex == -1) {\n                state.currentIndex = 0;\n            }\n        }\n    }\n});\n\n\nexport const hasPrevPost = state => state.posts.currentIndex > 0;\n\nexport const hasNextPost = state => state.posts.currentIndex + 1 <= state.posts.posts.length  - 1;\n\nexport const needToFetch = state => state.posts.posts.length - 1  - state.posts.currentIndex <= FETCH_THRESHOLD;\n\nexport const canFetch = state => {\n    if (state.posts.currentIndex == -1) {\n        return true;\n    }\n    for (let k in state.posts.cursors) {\n        if (state.posts.cursors[k].after) {\n            return true;\n        }\n    }\n    return false;\n};\n\nexport const canFetchSubreddit = (state, subreddit) => {\n    return !state.posts.cursors.hasOwnProperty(subreddit) || state.posts.cursors[subreddit].after != null;\n};\n\nexport const currentPost = state => {\n    if (state.posts.currentIndex == -1) {\n        return null;\n    }\n    if (state.posts.posts.length - 1 >= state.posts.currentIndex) {\n        return state.posts.posts[state.posts.currentIndex];\n    }\n    else {\n        return null;\n    }\n};\n\nexport const normalizePost = post => {\n    if (!post) return post\n    post = {...post}\n    post.subredditURL = 'https://www.reddit.com/r/' + post.subreddit\n    post.permalink = 'https://www.reddit.com' + post.permalink\n    post.authorURL = 'https://www.reddit.com/user/' + post.author + '/'\n    let imageSrc = post.image_resolutions[post.image_resolutions.length - 1].url\n    imageSrc = imageSrc.replace(/&amp;/g, '&')\n    post.imageSrc = imageSrc\n    return post\n}\n\n\n","import { createSlice} from '@reduxjs/toolkit'\n\nimport {AVAILABLE_SUBREDDITS, DEFAULT_SUBREDDITS} from '../settings.js'\n\nexport const subredditsSlice = createSlice({\n    name: 'subreddits',\n    initialState: {subreddits: DEFAULT_SUBREDDITS, settingsOpen: false},\n    reducers: {\n        addSubreddit: (state, action) => {\n            const sr = action.payload;\n            if (AVAILABLE_SUBREDDITS.includes(sr) && !state.subreddits.includes(sr)) {\n                state.subreddits.push(sr);\n            }\n        },\n        removeSubreddit: (state, action) => {\n            const sr = action.payload, index = state.subreddits.indexOf(sr);\n            if (index != -1) {\n                state.subreddits.splice(index, 1);\n            }\n        },\n        openSettings: (state, action) => {\n            state.settingsOpen = true;\n        },\n        closeSettings: (state, action) => {\n            state.settingsOpen = false;\n        }\n    }\n});\n\nexport const availableSubreddits = AVAILABLE_SUBREDDITS;\n\nexport const canRemoveSubreddit = (state) => state.subreddits.subreddits.length > 1;","import React from 'react'\n\nconst Post = ({ currentPost, hasPrevPost, hasNextPost, nextPost, prevPost}) => {\n    let prevPostButton, nextPostButton;\n    if (hasPrevPost) {\n        prevPostButton = (\n            <div className=\"p-2\">\n                <button onClick={(e) => {e.preventDefault(); prevPost(); document.querySelector(\"#image-title\").scrollIntoView({behavior: 'smooth'});}} className=\"btn ntn-sm btn-success\">«</button>\n            </div>\n        )\n    }\n    if (hasNextPost) {\n        nextPostButton = (\n            <div className=\"p-2\">\n                <button onClick={(e) => {e.preventDefault(); nextPost(); document.querySelector(\"#image-title\").scrollIntoView({behavior: 'smooth'});}} className=\"btn ntn-sm btn-success\">»</button>\n            </div>\n        )\n    }\n\n\n\n    return (\n        <div className=\"p-2\">\n            <h4 id=\"image-title\"><a href={currentPost.permalink}>{currentPost.title}</a></h4>\n            <p className=\"meta\">From <a href={currentPost.subredditURL}>r/{currentPost.subreddit}</a> by <a href={currentPost.authorURL}>u/{currentPost.author}</a></p>\n            <div className=\"d-flex justify-content-center\">\n                {prevPostButton}\n                {nextPostButton}\n            </div>\n            <div className=\"d-flex justify-content-center\">\n                <a href={currentPost.permalink}><img className=\"img-fluid\" title={currentPost.title} alt={currentPost.title} src={currentPost.imageSrc} /></a>\n            </div>\n\n            <div className=\"d-flex justify-content-center\">\n                {prevPostButton}\n                {nextPostButton}\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from 'react'\n\nexport default function SubredditsDialog({ subreddits, availableSubreddits, settingsOpen, closeSettings, addSubreddit, removeSubreddit, removeSubredditFromPosts, canRemoveSubreddit }) {\n    let display = settingsOpen ? 'block' : 'none';\n\n\n    const subredditsMarkup = availableSubreddits.map((subreddit) => {\n        let id = \"checkbox-\" + subreddit\n        let checked = subreddits.includes(subreddit) ? 'checked' : '';\n        let disabled = '';\n        if ((checked == 'checked') && !canRemoveSubreddit) {\n            disabled = 'disabled';\n        }\n        const handleChange = (e, sr) => {\n            if (e.target.checked) {\n                addSubreddit(sr);\n            }\n            else {\n                removeSubreddit(sr);\n                removeSubredditFromPosts(sr);\n            }\n        }\n        return (\n            <div className=\"form-check\" key={subreddit}>\n                <input className=\"form-check-input\" type=\"checkbox\" checked={checked} disabled={disabled}  onChange={(e) => handleChange(e, subreddit)} id={id} />\n                <label className=\"form-check-label\" htmlFor={id}>\n                    {subreddit}\n                </label>\n            </div>\n        );\n    });\n    return (\n        <div className=\"modal\" tabIndex={-1} role=\"dialog\" style={{ display: display }}>\n            <div className=\"modal-dialog\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">Chose subreddits</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={(e) => closeSettings(e)}>\n                            <span aria-hidden=\"true\">×</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <form>\n                            {subredditsMarkup}\n                        </form>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={(e) => closeSettings()}>Save changes</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nimport Post from './Post'\nimport SubredditsDialog from './SubredditsDialog'\nimport {SITE_TITLE} from '../settings'\n\n\n\nconst Layout = (props) => {\n    let postJSX;\n    if (props.currentPost) {\n        postJSX = (\n            <Post\n                currentPost={props.currentPost}\n                hasPrevPost={props.hasPrevPost}\n                hasNextPost={props.hasNextPost}\n                nextPost={props.nextPost}\n                prevPost={props.prevPost} />\n        )\n    }\n\n    return (\n        <div>\n            <header>\n                <nav className=\"navbar navbar-light bg-light\">\n                    <span className=\"navbar-brand\">{SITE_TITLE}</span>\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a href=\"#\" onClick={(e) => { e.preventDefault(); props.openSettings(); }}>Settings</a>\n                        </li>\n                    </ul>\n                </nav>\n            </header>\n            <div className=\"row justify-content-center align-items-center\">\n                <div className=\"col-8\">\n                    <div className=\"d-flex justify-content-center\">\n                        {postJSX}\n                    </div>\n                </div>\n            </div>\n            <SubredditsDialog\n                subreddits={props.subreddits}\n                availableSubreddits={props.availableSubreddits}\n                settingsOpen={props.settingsOpen}\n                canRemoveSubreddit={props.canRemoveSubreddit}\n                closeSettings={() => props.closeSettings()}\n                addSubreddit={(sr) => props.addSubreddit(sr)}\n                removeSubreddit={(sr) => props.removeSubreddit(sr)}\n                removeSubredditFromPosts={(sr) => props.removeSubredditFromPosts(sr)} />\n        </div>\n\n    );\n}\n\nexport default Layout","import React, { Component } from 'react'\nimport {connect} from 'react-redux'\n\nimport {hasPrevPost, hasNextPost, needToFetch, canFetch, currentPost, postsSlice, fetchPosts, normalizePost} from '../reducers/posts'\nimport {availableSubreddits, subredditsSlice, canRemoveSubreddit} from '../reducers/subreddits'\n\nimport Layout from '../components/Layout'\n\n\nclass App extends Component {\n\n    fetchAll() {\n        for (let i = 0; i < this.props.subreddits.length; ++i) {\n            this.props.fetchPosts(this.props.subreddits[i])\n        }\n    }\n\n    componentDidMount() {\n        this.fetchAll();\n    }\n\n    componentDidUpdate() {\n        if (this.props.needToFetch) {\n            this.fetchAll();\n        }\n    }\n\n    render() {\n        return (\n            <Layout {...this.props} />\n        )\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        subreddits: state.subreddits.subreddits,\n        availableSubreddits: availableSubreddits,\n        settingsOpen: state.subreddits.settingsOpen,\n        canRemoveSubreddit: canRemoveSubreddit(state),\n        hasPrevPost: hasPrevPost(state),\n        hasNextPost: hasNextPost(state),\n        needToFetch: needToFetch(state),\n        canFetch: canFetch(state),\n        currentPost: normalizePost(currentPost(state))\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        nextPost: () => dispatch(postsSlice.actions.next()),\n        prevPost: () => dispatch(postsSlice.actions.prev()),\n        fetchPosts: criteria => dispatch(fetchPosts(criteria)),\n        removeSubredditFromPosts: subreddit => dispatch(postsSlice.actions.removeSubreddit(subreddit)),\n        addSubreddit: subreddit => dispatch(subredditsSlice.actions.addSubreddit(subreddit)),\n        removeSubreddit: subreddit => dispatch(subredditsSlice.actions.removeSubreddit(subreddit)),\n        openSettings: () => dispatch(subredditsSlice.actions.openSettings()),\n        closeSettings: () => dispatch(subredditsSlice.actions.closeSettings()),\n        toggleSubreddit: (sr) => dispatch(subredditsSlice.actions.toggleSubreddit, sr),\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { combineReducers } from 'redux'\nimport {postsSlice} from './posts'\nimport {subredditsSlice} from './subreddits'\n\nexport default combineReducers({\n    posts: postsSlice.reducer,\n    subreddits: subredditsSlice.reducer\n})\n\n\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport rootReducer from '../reducers'\n\n\nconst middleware = [...getDefaultMiddleware()]\n\n\nconst  store = configureStore({\n    reducer: rootReducer,\n    middleware: middleware\n});\n\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './features/reddit/containers/App'\r\nimport store from './features/reddit/store'\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}